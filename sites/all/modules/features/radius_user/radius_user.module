<?php
use Wvpn\Client\WebService;

/**
 * @file
 * Code for the Radius User feature.
 */

include_once 'radius_user.features.inc';


/**
 * Implements hook_menu().
 */
function radius_user_menu() {
  $items = array();

  $items['renew/%node/%user'] = array(
    'title' => '',
    'description' => 'Renew service',
    'page callback' => 'radius_user_product_renew',
    'page arguments' => array(1, 2),
    'access callback' => 'radius_user_porduct_renew_access_callback',
    'access arguments' => array(1, 2),
  );

  return $items;
}

/**
 * Determine if the user can be renewed or not.
 * @param Object $node node to be renewed.
 * @param Object $user user who referencing node.
 * @return boolean
 */
function radius_user_porduct_renew_access_callback($node, $user) {
  if (user_is_anonymous()) {
    drupal_set_message(t('Please login to renew your service.'));
  }

  if (user_is_logged_in() && $node->type == 'radius_user') {
    return TRUE;
  }

  return FALSE;
}

/**
 * Adding a radius node to cart for renew.
 * @param Object $node node to be renewed.
 * @param Object $user user who referencing node.
 */
function radius_user_product_renew($node, $user) {
  // set product reference on radius user node after purchase.

  // 1) create a product line item
  $product_id = $node->field_product_reference[LANGUAGE_NONE][0]['product_id'];

  $order = commerce_order_new($user->uid, 'checkout_checkout');
  // Save the order to get its ID.
  commerce_order_save($order);

  $product = commerce_product_load($product_id);
  $line_item = commerce_product_line_item_new($product, 1, $order->order_id);

  // Save the line item to get its ID.
  commerce_line_item_save($line_item);

  // 2) send it to cart
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->commerce_line_items[] = $line_item;

  // Save the order again to update its line item reference field.
  commerce_order_save($order);

  // We are going to set two session variable in order to identify the renew process.
  $_SESSION['renew'] = TRUE;
  $_SESSION['renew_nid'] = $node->nid;

  drupal_goto('checkout/' . $order->order_id);

  // 3) set radius node status to 1 and expired date according to comerce product length, after payment confirmed
  // See store_actions_vpn_account_setup function in store.module

  // 4) call raidus web service and move user from disabled group to normal group
  // See store_renew_radius_user function in store.module
}


/**
 * Implements hook_cron().
 */
function radius_user_cron() {
  // load radius user with status is active = 1;
  $expired_raidus_user_nodes = radius_user_get_expired_radius_user_nodes();

  // setup a drupal queue api to store loaded radius user;
  if (!empty($expired_raidus_user_nodes)) {

    $queue = DrupalQueue::get('radius_user');
    foreach($expired_raidus_user_nodes as $expired_raidus_user_node) {
      $queue->createItem($expired_raidus_user_node->nid);
    }
  }

  // foreach radius user, batch api.
  // inside queue excution, check each radius user's expired day against current time.
  // if current radius user expired, then call web service 'radius' and put it in disable group.
}

/**
 * Implements hook_node_view().
 */
function radius_user_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'radius_user' && $view_mode == 'teaser') {

    // TODO Only show renew button when only 1 month left;
    global $user;

    $path_renew =  '/renew/' . $node->nid . '/' .  $user->uid;
    $path_server = '/servers/' . $node->nid . '/' . $user->uid;

    $options_renew = array(
      'html' => FALSE,
      'attributes' => array(
        'class' => array('button', 'renew'),
      ),
//       'query' => drupal_get_destination(),
    );

    $options_server = array(
      'html' => FALSE,
      'attributes' => array(
        'class' => array('button', 'servers'),
      ),
      'query' => drupal_get_destination(),
    );

    $links = array(l(t('Select a Server'), $path_server, $options_server), l(t('Renew'), $path_renew, $options_renew));

    if ($node->field_status[LANGUAGE_NONE][0]['value'] == 0) {
      $links = array(l(t('Renew'), $path_renew, $options_renew));
    }

    $node->content['buttons'] = array (
      '#markup' => theme('download_link', array('links' => $links)),
      '#weight' => 3,
    );
  }
}

/**
 * Implements hook_field_extra_fields().
 * If we only invoke hook_node_view it won't work.
 * We have to implement this method, since we are using DS(display suite)
 * to add buttons to radius_user teaser view mode.
 * DS only cares about node_view stuff if those fields are exposed in the field UI
 */
function radius_user_field_extra_fields() {
  $extra = array();
  // Just adding the psuedo field to the page node type.
  $extra['node']['radius_user']['display'] = array(
    'buttons' => array(
      'label' => t('Buttons'),
      'description' => t('Buttons'),
      'weight' => -5,
    ),
  );
  return $extra;
}

/**
 * Get all radius user nodes from db.
 * @return mixed
 *  array contains radius node ids or FALSE when no result.
 */
function radius_user_get_expired_radius_user_nodes() {
  // Query all expired radius user nodes.
  $query = db_select('node', 'n');
  $query->join('field_data_field_expiry_date', 'fe', 'n.nid = fe.entity_id');
  $query->join('field_data_field_status', 'fs', 'n.nid = fs.entity_id');
  $query->fields('n', array('nid', 'type'))
  ->condition('n.type', 'radius_user')
  ->condition('fe.field_expiry_date_value', REQUEST_TIME, '<')
  ->condition('fs.field_status_value', 1);

  $radius_user_nodes = $query->execute()->fetchAll();

  return !empty($radius_user_nodes) ? $radius_user_nodes : FALSE;
}

/**
 * Implements hook_cron_queue_info().
 */
function radius_user_cron_queue_info() {
  $queues['radius_user'] = array(
    'worker callback' => 'radius_user_queue_run', // The callback function for each queue item.
    'time' => 60, // The max run time per cron run in seconds.
  );
  return $queues;
}

/**
 * The callback function for each queue item
 * @param $nid node id.
 */
function radius_user_queue_run($nid) {
  radius_user_update_node($nid);
}

// /**
//  * The batch process function for radius user node type,
//  * This function need to be in the module file, don't put it in
//  * the server.batch.inc file, or it will failed silently.
//  * @param unknown $server_nodes
//  * @param unknown $context
//  */
// function radius_user_process_server_nodes($radius_user_nodes, &$context) {
//   // How many server nodes we want to process each time.
//   $limit = 5;

//   // Update server nodes status.
//   if (!isset($context['sandbox']['progress'])) {
//     $context['sandbox']['progress'] = 0;
//     $context['sandbox']['title'] = '';
//     $context['sandbox']['max'] = count($radius_user_nodes);
//     // The starting point the the array.
//     $start = 0;
//   }
//   else {
//     $start = $context['sandbox']['progress'];
//   }

//   // Only take a chunk of the nodes to process at a time.
//   $radius_user_nodes_section = array_slice($radius_user_nodes, $start, $limit);

//   // Process them.
//   if($context['sandbox']['progress'] < $context['sandbox']['max']){

//     foreach ($radius_user_nodes_section as $radius_user_node) {
//       // TODO Update radius user nodes contents here.
//       radius_user_update_node($radius_user_node->nid);

//       // Have to keep track of progress, or we end up in a infinity loop.
//       $context['sandbox']['progress']++;
//       $context['results'][] = check_plain($node->title); // Keep a running tab of all of the nodes created.
//       $context['message'] = $context['sandbox']['progress'] . " of " . $context['sandbox']['max'];
//     }
//   }

//   // Check if the batch is finished
//   if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
//     $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
//   }
// }

/**
 * Programatically update server node's properties.
 */
function radius_user_update_node($nid) {
  $node = node_load($nid);

  if (!empty($node) && $node->type == 'radius_user') {
    // Make sure we have radius service available.
    $radius = WebService::getServiceClient('radius');

    try{
      $radius_user_name = $node->field_radius_id[LANGUAGE_NONE][0]['value'];
      $response = $radius->getAccount($radius_user_name);

      // We have a this user in raidus db.
      if ($response->getStatusCode() == 200) {
        // Update radius service to disable expired account.
        $update_response = $radius->updateAccount($radius_user_name, array('status' => '0'));

        // Update success, now lets update the drupal part.
        if ($update_response->getStatusCode() == 200) {

          // Update drupal radius user, set status to 0 == expired.
          $node->field_status[LANGUAGE_NONE][0]['value'] = 0;
          node_save($node);
        }else {
          watchdog('radius_user', 'Update radius user node [@user] status failed.', array('@user' => $radius_user_name));
        }
      }
    }
    catch( Wvpn\Client\Exception\EntityNotFoundException $e ){
      watchdog('radius_user', 'Radius user [@user] not found.', array('@user' => $radius_user_name));
    }
    catch( GuzzleHttp\Exception\ClientException $e){
      watchdog('radius_user', "ErrorCode: [{$e->getCode()}] Message: [{$e->getMessage()}]");
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Add expired class to expiration radius user node.
 */
function radius_user_preprocess_field(&$vars) {
  if ($vars['element']['#field_name'] = 'field_status') {
    if (isset($vars['element']['#items'][0]['value']) && $vars['element']['#items'][0]['value'] == 0) {
      $vars['classes_array'][] = 'expired';
    }
  }
}